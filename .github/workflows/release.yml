name: Build and Publish

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
    tags:
      - '*'
  workflow_dispatch:
    inputs:
      tag:
        description: "The tag to build the image with. Format *.*.*((beta|rc)*)?"
        required: true

jobs:
    docker-metadata:
      name: Generate docker metadata
      runs-on: ubuntu-latest
      outputs:
        tags: ${{steps.meta.outputs.tags}}
        labels: ${{steps.meta.outputs.labels}}
        annotations: ${{steps.meta.outputs.annotations}}
        platforms: |
          linux/amd64
          ${{(startsWith(github.ref, 'refs/tags/') && 'linux/arm64') || ''}}
      permissions:
        contents: read
      steps:
        - name: Docker metadata
          id: meta
          uses: docker/metadata-action@v5
          with:
            github-token: ${{ github.token }}
            images: "{0}/{1}"
            tags: |
              type=raw,value=branch-{{branch}},enable=${{ !startsWith(github.ref, 'refs/tags/') && !startsWith(github.ref, 'refs/pull/') }}
              type=sha,prefix=sha-,format=long,suffix=-dev,enable=${{ !startsWith(github.ref, 'refs/tags/') }}
              type=sha,prefix=sha-,format=long,enable=${{ startsWith(github.ref, 'refs/tags/') }}
              type=ref,event=pr
              type=pep440,value=${{inputs.tag || github.ref_name}},pattern={{version}}
              type=pep440,value=${{inputs.tag || github.ref_name}},pattern={{major}}.{{minor}}
              type=pep440,value=${{inputs.tag || github.ref_name}},pattern={{major}}

    build-backend:
      name: Build and Push Backend Image
      runs-on: ubuntu-latest
      needs: docker-metadata
      permissions:
        contents: read
        packages: write
        attestations: write
        id-token: write
      steps:
        -
          name: Checkout
          uses: actions/checkout@v4
        -
          name: Login to Docker Hub
          uses: docker/login-action@v3
          with:
            username: ${{ secrets.RELEASE_DOCKERHUB_USERNAME }}
            password: ${{ secrets.RELEASE_DOCKERHUB_TOKEN }}
        -
          name: Set up QEMU
          uses: docker/setup-qemu-action@v3
        -
          name: Set up Docker Buildx
          uses: docker/setup-buildx-action@v3
        -
          name: Build and push backend
          uses: docker/build-push-action@v6
          with:
            context: backend
            platforms: ${{needs.docker-metadata.outputs.platforms}}
            push: true
            tags: ${{format(needs.docker-metadata.outputs.tags, secrets.RELEASE_DOCKERHUB_USERNAME, 'backend')}}
            labels: ${{needs.docker-metadata.outputs.labels}}
            annotations: ${{needs.docker-metadata.outputs.annotations}}

    build-frontend:
      name: Build and Push Frontend Image
      runs-on: ubuntu-latest
      needs: docker-metadata
      permissions:
        contents: read
        packages: write
        attestations: write
        id-token: write
      steps:
        -
          name: Checkout
          uses: actions/checkout@v4
        -
          name: Login to Docker Hub
          uses: docker/login-action@v3
          with:
            username: ${{ secrets.RELEASE_DOCKERHUB_USERNAME }}
            password: ${{ secrets.RELEASE_DOCKERHUB_TOKEN }}
        -
          name: Set up QEMU
          uses: docker/setup-qemu-action@v3
        -
          name: Set up Docker Buildx
          uses: docker/setup-buildx-action@v3
        -
          name: Build and push frontend
          uses: docker/build-push-action@v6
          with:
            context: .
            file: ./frontend/Dockerfile
            platforms:  ${{needs.docker-metadata.outputs.platforms}}
            push: true
            tags: ${{format(needs.docker-metadata.outputs.tags, secrets.RELEASE_DOCKERHUB_USERNAME, 'frontend')}}
            labels: ${{needs.docker-metadata.outputs.labels}}
            annotations: ${{needs.docker-metadata.outputs.annotations}}

    e2e-test:
      name: E2E Test
      runs-on: ubuntu-latest
      timeout-minutes: 10
      defaults:
        run:
          working-directory: e2e
      needs:
        - build-backend
        - build-frontend
      steps:
        - uses: actions/checkout@v4

        - uses: actions/setup-node@v4
          with:
            node-version: lts/*

        - name: Install dependencies
          run: npm ci

        - uses: KengoTODA/actions-setup-docker-compose@v1
          with:
            version: '2.14.2'

        - name: Install Playwright Browsers
          run: npx playwright install --with-deps

        - name: Run tests
          run: ./start-test.sh
          env:
            E2E_DOCKER_TAG: sha-${{ github.sha }}-dev
            E2E_LLM_PROVIDER: ${{vars.E2E_LLM_PROVIDER}}
            E2E_LLM_MODEL: ${{vars.E2E_LLM_MODEL || ''}}
            E2E_LLM_CREDENTIALS: ${{secrets.E2E_LLM_CREDENTIALS}}
            E2E_EMBEDDING_PROVIDER: ${{vars.E2E_EMBEDDING_PROVIDER || 'openai'}}
            E2E_EMBEDDING_MODEL: ${{vars.E2E_EMBEDDING_MODEL || ''}}
            E2E_EMBEDDING_CREDENTIALS: ${{secrets.E2E_EMBEDDING_CREDENTIALS}}
            E2E_RERANKER_PROVIDER: ${{vars.E2E_RERANKER_PROVIDER || 'jinaai'}}
            E2E_RERANKER_MODEL: ${{vars.E2E_RERANKER_MODEL || ''}}
            E2E_RERANKER_CREDENTIALS: ${{secrets.E2E_RERANKER_CREDENTIALS}}

        - uses: actions/upload-artifact@v4
          if: failure()
          with:
            name: e2e-report
            path: e2e/playwright-report/
            retention-days: 30
